<?php

/**
 * @file
 * Hooks definitions for app module.
 */

declare(strict_types=1);

use App\Storage\NodeStorage;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function app_theme(): array {
  return [
    'toolbar' => [
      'variables' => [
        'route' => NULL,
        'cache' => NULL,
      ],
    ],
    'admin_toolbar' => [
      'variables' => [
        'menu' => NULL,
        'cache' => NULL,
      ],
      'attached' => [
        'library' => NULL,
        'drupalSettings' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_type_alter().
 */
function app_entity_type_alter(array &$entity_types): void {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setHandlerClass('storage', NodeStorage::class);
  }
}

/**
 * Implements hook_js_settings_alter().
 */
function app_js_settings_alter(array &$settings): void {
  if (!array_key_exists('editor', $settings)) {
    return;
  }
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
      $settings['editor']['formats'][$text_format_id]['editorSettings']['format_tags'] .= ';cite';
      $settings['editor']['formats'][$text_format_id]['editorSettings']['autoGrow_minHeight'] = '100';
      $settings['editor']['formats'][$text_format_id]['editorSettings']['autoGrow_maxHeight'] = '300';

      $settings['editor']['formats'][$text_format_id]['editorSettings']['format_cite'] = [
        'name' => 'Cite',
        'element' => 'cite',
      ];
    }
  }
}

/**
 * Implements hook_form_node_form_alter().
 */
function app_form_node_form_alter(array &$form, FormStateInterface &$form_state): void {
  $form['title']['#access'] = FALSE;

  $form_object = $form_state->getFormObject();
  $node = $form_object->getEntity();

  if ($node->isNew()) {
    $form['actions']['preview']['#access'] = FALSE;
  }

  if (!array_key_exists('menu', $form)) {
    return;
  }

  if ($node->getType() == 'home') {
    $form['path']['#access'] = FALSE;
    $form['menu']['#access'] = FALSE;
    $form['menu']['enabled']['#default_value'] = FALSE;
  }
  else {
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

    if ($menu_links = $menu_link_manager->loadLinksByRoute('entity.node.canonical', ['node' => $node->id()])) {
      $menu_link = array_pop($menu_links);
      $menu_link_disabled = $menu_link->isEnabled() ? FALSE : TRUE;
    }
    else {
      $menu_link_disabled = FALSE;
    }

    $all_links = $form['menu']['link']['menu_parent']['#options'];
    $enabled_links = array_filter($all_links, function ($value) {
      if (strpos($value, '(disabled)') === FALSE) {
        return TRUE;
      }
    });
    $form['menu']['link']['menu_parent']['#options'] = $enabled_links;

    $form['menu']['enabled']['#default_value'] = TRUE;
    $form['menu']['link']['link_disabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Hide from navigation'),
      '#description' => t('Select this option to hide this menu item from the navigation.'),
      '#default_value' => $menu_link_disabled,
    ];
  }

  $form['menu']['enabled']['#disabled'] = TRUE;
  $form['menu']['link']['description']['#access'] = FALSE;
  $form['menu']['link']['weight']['#access'] = FALSE;
  $form['menu']['#weight'] = -20;

  $form['#validate'][] = 'app_form_node_form_validate';
}

/**
 * Implements hook_form_node_form_validate().
 */
function app_form_node_form_validate(array &$form, FormStateInterface $form_state): void {
  if ($form_state->getUserInput()['op'] == 'Preview') {
    if ($form['menu']['link']['title']['#value'] != $form['menu']['link']['title']['#default_value']) {
      $form_state->setErrorByName('menu][title', 'Preview is not available for menu changes.');
    }
  }
  $form_object = $form_state->getFormObject();
  $node = $form_object->getEntity();

  if ($node->getType() != 'home') {
    if (!$form['menu']['link']['title']['#value']) {
      $form_state->setErrorByName('menu][title', 'Please provide a menu link title.');
    }
  }
}
